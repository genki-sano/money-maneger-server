// Code generated by MockGen. DO NOT EDIT.
// Source: package/infrastructure/datastore/payment.go

// Package mock_datastore is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domains "github.com/genki-sano/money-maneger-server/package/domains"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentDatastore is a mock of PaymentDatastore interface
type MockPaymentDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentDatastoreMockRecorder
}

// MockPaymentDatastoreMockRecorder is the mock recorder for MockPaymentDatastore
type MockPaymentDatastoreMockRecorder struct {
	mock *MockPaymentDatastore
}

// NewMockPaymentDatastore creates a new mock instance
func NewMockPaymentDatastore(ctrl *gomock.Controller) *MockPaymentDatastore {
	mock := &MockPaymentDatastore{ctrl: ctrl}
	mock.recorder = &MockPaymentDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentDatastore) EXPECT() *MockPaymentDatastoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockPaymentDatastore) GetAll() (domains.Payments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(domains.Payments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPaymentDatastoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPaymentDatastore)(nil).GetAll))
}
